@page "/User"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using DCMLocker.Shared
@using DCMLocker.Shared.Locker



@inject Authentication.MOFAuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject DCMLocker.Client.Cliente.TLockerCliente Cliente


@if (!string.IsNullOrEmpty(username))
{
<div class="text-center">
    <h3>Hola !!</h3>
    <p>
        @username <br /> Para cerrar la sesión pulse en
        <a @onclick="BeginSignOut" href="#" style="color:blue;">Salir</a>
    </p>
   
</div>
    @if (Perfil != null)
    {
        @if (!Perfil.Enable)
        {
            <div class="alert alert-danger">
                <strong>Usted no ha verificado su email <a href="/Verificar">Verificar</a></strong>
            </div>
        }

        @if ((Perfil.Boxses != null) && (Perfil.Boxses.Length > 0))
        {
<div class="alert alert-secondary mt-4" role="alert">
    <span class="oi  @(!Perfil.IsLocked?"oi-lock-unlocked":"oi-lock-locked") mr-2" aria-hidden="true"></span>
    <strong>Usted posee los siguientes Box</strong>
    <br />
    <span>
        Al pulsar el boton con el número de de BOX, abrira al mismo.
    </span>
    <br />
    <br />
    <form>
        <div class="form-group">
            <label><strong>Asignación o remoción de cajas</strong></label>
            <select @bind="box" class="form-control form-control-user">
                @if (Perfil != null)
                {
                    @for (int x = 0; x < Perfil.Boxses.Length; x++)
                    {
                        <option value="@Perfil.Boxses[x]">BOX @(Perfil.Boxses[x] + 1)</option>
                    }
                }
            </select>

        </div>
        <button type="button" disabled="@(IsBussy || Perfil.IsLocked)" class="btn btn-primary btn-user btn-block" @onclick="(() => Accion())">Abrir</button>

        @if (!string.IsNullOrEmpty(tokenkey))
        {
    <div class="form-group" style="padding-top:50px;">
        <label>
            Token de Acceso  
            <a class="btn btn-success"  href="whatsapp://send?text=LOCKER llave para apertura www.dcm.com.ar/QR/index/@tokenkey"><span class="oi oi-fork"></span></a>
            <a class="btn btn-info" href="mailto:contacto@exemplo.com?subject=LLave para mi Box &body=LOCKER llave para apertura www.dcm.com.ar/QR/index/@tokenkey"><span class="oi oi-envelope-closed"></span></a>
        </label>
        <input type="text" readonly @bind="tokenkey" class="form-control form-control-user" />
       
    </div>
        }
        <button type="button" disabled="@(IsBussy || Perfil.IsLocked)" class="btn btn-warning btn-user btn-block" @onclick="(() => Accion2())">Generar Token de Acceso</button>

    </form>

    
    @if (Perfil.IsLocked)
    {
        <br />
        <strong>*** Usted se encuentra bloqueado por el administrador. Por favor comuniquese con el Administrador.</strong>
    }
</div>




        }
        else
        {
            <div class="alert alert-secondary mt-4" role="alert">
                <span class="oi oi-pencil mr-2" aria-hidden="true"></span>
                <strong>Usted no dispone de ningun Box</strong>

                <span class="text-nowrap">
                    Para solicitar un Box pulse el boton BOX
                </span>

            </div>
        }

    }
   
    <AuthorizeView Roles="User">
        <a  class="btn-flotante" disabled="@(IsBussy || Perfil.IsLocked)" title="Bloquear/Desbloquear usuario" style="background-color:green; color:white;" @onclick="ActionAdd"><span class="oi oi-plus"></span></a>
    </AuthorizeView>
 }
 else
 {
<div class="abs-center">
    <div class="spinner-grow text-secondary"></div>
    <div class="spinner-grow text-secondary"></div>
    <div class="spinner-grow text-secondary"></div>
</div>
 }

        @code {
            private string _authMessage;
            private string _surnameMessage;
            private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

            private string username = "";
            private bool IsAdmin = false;
            private bool IsUser = false;
            private bool IsBussy = false;
            private LockerUserPerfil Perfil = null;
            private int box;
            private string tokenkey = "";


            private async Task BeginSignOut(MouseEventArgs args)
            {
                await AuthenticationStateProvider.SetTokenAsync(null, null);
                Navigation.NavigateTo("/");

            }

            protected async override void OnInitialized()
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;
                username = user.Identity.Name;

                IsAdmin = user.IsInRole("Admin");
                IsUser = user.IsInRole("User");

                if (user.Identity.IsAuthenticated)
                {
                    _authMessage = $"{user.Identity.Name} is authenticated.";
                    _claims = user.Claims;
                    _surnameMessage =
                        $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
                }
                else
                {
                    _authMessage = "The user is NOT authenticated.";
                }

                Perfil = await Cliente.GetMyBox();
                if (Perfil.Boxses.Length > 0) box = Perfil.Boxses[0];
                Console.WriteLine(Perfil.Enable);
                StateHasChanged();
                base.OnInitialized();
            }

            protected async void Accion()
            {
                IsBussy = true;
                try
                {
                    Console.WriteLine($"BOX {box}");
                    await Cliente.OpenLocker(((box & 0x00f0) >> 4), (box & 0x000f), username, "123456");
                    Perfil = await Cliente.GetMyBox();
                    if (Perfil.Boxses.Length > 0) box = Perfil.Boxses[0];
                }
                finally
                {
                    IsBussy = false;
                }
                StateHasChanged();
            }
            protected async void Accion2()
            {
                IsBussy = true;
                try
                {
                    tokenkey = await Cliente.GenerateTokenKey(box);
                }
                finally
                {
                    IsBussy = false;
                }
                StateHasChanged();
            }

            private void ActionAdd()
            {
                Navigation.NavigateTo("/Addbox");
            }
        }
